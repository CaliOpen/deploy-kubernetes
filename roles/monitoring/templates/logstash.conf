input {
	beats {
		port => "5044"
		type => beats
	}
}

filter {

	# Logs coming from the kubernetes cluster all have a similar file structure, we get some useful info from the filename
	# Time for the logs comes from the docker timestamp
	if [prog] == "k8s_cluster" {
		mutate {
			rename => { "log" => "message" }
			remove_field => ["input_type", "stream", "offset", "beat"]
		}
		date {
			match => ["time", "ISO8601"]
			remove_field => ["time"]
		}
		grok {
			match => { "source" => "/var/log/containers/%{DATA:pod}_%{DATA:namespace}_(?<service>%{DATA}(-%{DATA})?)-%{DATA:container}.log"}
			remove_field => ["source"]
		}
	}

	# Each service has a different logging format, we try to keep only the necessary information. 
	# APIs save the response code `resp_code`, the duration of the request `duration_ms`, the type of request `http_req`, and the url `path`
	if [service] == "lmtpd" {
		grok {
			match => { "message" => "time=\"%{DATA:_time}\" level=%{WORD:level} msg=\"%{DATA:message}\""}
			overwrite => ["message"]
			remove_field => ["_time"]
		}
	}

	if [service] == "imap-worker" {
		grok {
			match => { "message" => "time=\"%{DATA:_time}\" level=%{WORD:level} msg=\"%{DATA:message}\""}
			overwrite => ["message"]
			remove_field => ["_time"]
		}
	}

	if [service] == "mq-worker" {
		grok {
			match => { "message" => "%{WORD:level}:%{DATA:extra}:%{DATA:message}$"}
			overwrite => ["message"]
		}
	}

	if [service] == "identity-poller" {
		grok {
			match => { "message" => "time=\"%{DATA:_time}\" level=%{WORD:level} msg=\"%{DATA:message}\""}
			overwrite => ["message"]
			remove_field => ["_time"]
		}
	}

	if [service] == "apiv1" {
		grok {
			match => { "message" => "\[%{DATA:req}\] %{IPV4:ip} \(\) \{%{DATA:vars}\} \[%{DATA:_time}\] %{WORD:http_req} %{DATA:path} %{DATA:rnd} generated %{NUMBER:bytes_generated} bytes in %{NUMBER:duration_ms} msecs \(HTTP/%{NUMBER:http_version} %{NUMBER:resp_code}\) %{DATA:rest}$"}
			remove_field => ["_time","req","ip","vars","rnd","bytes_generated","http_version","rest", "message"]
		}
		grok {
			match => { "message" => "%{WORD:level}:%{DATA:extra}:%{DATA:message}$"}
			overwrite => ["message"]
		}
	}

	if [service] == "apiv2" {
		grok {
			match => { "message" => "%{DATA:_time} \| %{NUMBER:resp_code} \|[ ]*%{NUMBER:duration_ms}ms \|[ ]*%{IPV4:ip} \| %{WORD:http_req}[ ]*%{DATA:path}$" }
			remove_field => ["_time", "message"]
		}
		grok {
			match =>  { "message" => "time=\"%{DATA:_time}\" level=%{WORD:level} msg=\"%{DATA:message}\"" }
			overwrite => ["message"]
			remove_field => ["_time"]
		}
	}

	if [service] == "frontend" {
		grok {
			match => { "message" => "%{TIMESTAMP_ISO8601:_time} .{9}%{DATA:level}.{9} %{DATA:extra} - %{DATA:message}"}
			overwrite => ["message"]
			remove_field => ["_time"]
		}
	}

	if [service] == "logstash"{
		grok {
			match => { "message" => "\[%{DATA:_time}\]\[%{WORD:level} \]\[%{DATA:extra}[ ]*\] %{DATA:message}$"}
			overwrite => ["message"]
			remove_field => ["_time"]
		}
	}
}

output {
	#elasticsearch {
	#	hosts => [{% for host in groups['store']%}
	#	"{{ hostvars[host]['private_ips']}}:9200"
	#	{%- if not loop.last -%}
	#	,
	#	{% endif %}
	#	{% endfor %}]
	#}
	file {
		path =>  "/usr/share/logstash/output.log"
	}
}
